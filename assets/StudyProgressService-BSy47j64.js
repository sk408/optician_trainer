var P=Object.defineProperty;var y=(l,s,e)=>s in l?P(l,s,{enumerable:!0,configurable:!0,writable:!0,value:e}):l[s]=e;var S=(l,s,e)=>y(l,typeof s!="symbol"?s+"":s,e);import{f as T,d as v,e as m,n as f}from"./ncleTopics-DQTafvxE.js";import{v as u}from"./v4-C6aID195.js";const w={name:"ABO Beginner Pathway",description:"A structured learning path for absolute beginners preparing for the ABO exam",focusArea:"ABO",difficulty:"beginner",estimatedHours:25,topicSequence:["basic-optics","lens-types","frame-fit","lens-materials","rx-interpretation","pd-measurement","basic-tools","frame-adjustments","lens-treatments","lensometers"],isActive:!1},A={name:"NCLE Beginner Pathway",description:"A structured learning path for absolute beginners preparing for the NCLE exam",focusArea:"NCLE",difficulty:"beginner",estimatedHours:22,topicSequence:["cl-overview","eye-anatomy-cl","soft-cl-materials","cl-insertion-removal","cl-hygiene","cl-care-systems","cl-fitting-basics","soft-lens-parameters","cl-wear-schedules","cl-complications-basics","cl-regulations"],isActive:!1},U={name:"Combined ABO-NCLE Beginner Pathway",description:"A comprehensive learning path covering both ABO and NCLE topics for beginners",focusArea:"Both",difficulty:"beginner",estimatedHours:45,topicSequence:["basic-optics","lens-types","cl-overview","eye-anatomy-cl","frame-fit","lens-materials","soft-cl-materials","rx-interpretation","pd-measurement","cl-insertion-removal","cl-hygiene","basic-tools","frame-adjustments","cl-care-systems","lens-treatments","cl-fitting-basics","soft-lens-parameters","cl-wear-schedules","lensometers","cl-complications-basics","cl-regulations"],isActive:!1},h="optician_trainer_progress";class M{constructor(){S(this,"defaultProgress",{userId:"default",topicProgress:{},studySessions:[],studyGoals:[],studyPlans:[],stats:{totalTimeSpentMinutes:0,topicsCompleted:0,totalTopics:0,weakestTopics:[],strongestTopics:[],streak:0},preferredStudyDurationMinutes:30,weeklyStudyTargetHours:5})}initializeUserProgress(){const s=this.getUserProgress();if(s)return s;const e=[{...w,id:u()},{...A,id:u()},{...U,id:u()}],i=[...T,...v].length,r={...this.defaultProgress,userId:u(),studyPlans:e,stats:{...this.defaultProgress.stats,totalTopics:i}};return this.saveUserProgress(r),r}getUserProgress(){try{const s=localStorage.getItem(h);return s?JSON.parse(s):null}catch(s){return console.error("Error getting user progress:",s),null}}saveUserProgress(s){try{localStorage.setItem(h,JSON.stringify(s))}catch(e){console.error("Error saving user progress:",e)}}startStudySession(s){const e=this.getUserProgress()||this.initializeUserProgress(),t={id:u(),topicId:s,startTime:new Date().toISOString(),completed:!1};return e.studySessions=[t,...e.studySessions],this.saveUserProgress(e),t}endStudySession(s){const e=this.getUserProgress();if(!e)return null;const t=e.studySessions.findIndex(n=>n.id===s);if(t===-1)return null;const i=e.studySessions[t],r=new Date().toISOString(),a=new Date(i.startTime),c=Math.round((new Date(r).getTime()-a.getTime())/6e4),d={...i,endTime:r,duration:c,completed:!0};e.studySessions[t]=d;const p=d.topicId,o=e.topicProgress[p]||{topicId:p,completed:!1,timeSpentMinutes:0};return e.topicProgress[p]={...o,timeSpentMinutes:o.timeSpentMinutes+c,lastStudiedDate:r},e.stats.totalTimeSpentMinutes+=c,this.updateStudyStreak(e),this.saveUserProgress(e),d}markTopicCompleted(s,e=!0){const t=this.getUserProgress();if(!t)return null;const i=t.topicProgress[s]||{topicId:s,completed:!1,timeSpentMinutes:0},r={...i,completed:e};return t.topicProgress[s]=r,e&&!i.completed?t.stats.topicsCompleted+=1:!e&&i.completed&&(t.stats.topicsCompleted-=1),this.saveUserProgress(t),r}saveQuizScore(s,e){const t=this.getUserProgress();if(!t)return null;const i=t.topicProgress[s]||{topicId:s,completed:!1,timeSpentMinutes:0},r={...i,quizScore:e};return t.topicProgress[s]=r,e>=80&&!i.completed&&(r.completed=!0,t.stats.topicsCompleted+=1),this.updateTopicStrengths(t),this.saveUserProgress(t),r}updateStudyStreak(s){const e=new Date().toISOString().split("T")[0],t=s.stats.lastStudyDate;if(!t){s.stats.streak=1,s.stats.lastStudyDate=e;return}const i=t.split("T")[0];if(i===e)return;const r=new Date;r.setDate(r.getDate()-1);const a=r.toISOString().split("T")[0];i===a?s.stats.streak+=1:s.stats.streak=1,s.stats.lastStudyDate=e}updateTopicStrengths(s){const e=Object.values(s.topicProgress).filter(i=>i.quizScore!==void 0).sort((i,r)=>(i.quizScore||0)-(r.quizScore||0));if(e.length===0)return;const t=e.reduce((i,r)=>i+(r.quizScore||0),0);s.stats.averageQuizScore=Math.round(t/e.length),s.stats.weakestTopics=e.slice(0,Math.min(3,e.length)).map(i=>i.topicId),s.stats.strongestTopics=e.slice(-Math.min(3,e.length)).reverse().map(i=>i.topicId)}createStudyGoal(s,e,t){const i=this.getUserProgress()||this.initializeUserProgress(),r={id:u(),description:s,targetDate:e,completed:!1,topicIds:t};return i.studyGoals=[r,...i.studyGoals],this.saveUserProgress(i),r}activateStudyPlan(s){const e=this.getUserProgress();if(!e)return null;e.studyPlans=e.studyPlans.map(i=>({...i,isActive:!1}));const t=e.studyPlans.findIndex(i=>i.id===s);return t===-1?null:(e.studyPlans[t].isActive=!0,e.studyPlans[t].startDate=new Date().toISOString(),e.activeStudyPlanId=s,this.saveUserProgress(e),e.studyPlans[t])}getActiveStudyPlan(){const s=this.getUserProgress();return!s||!s.activeStudyPlanId?null:s.studyPlans.find(e=>e.id===s.activeStudyPlanId)||null}getAllTopicsWithProgress(){const s=this.getUserProgress()||this.initializeUserProgress(),e=m.flatMap(r=>r.topics.map(a=>({...a,examType:"ABO",sectionId:r.id}))),t=f.flatMap(r=>r.topics.map(a=>({...a,examType:"NCLE",sectionId:r.id})));return[...e,...t].map(r=>({topic:r,progress:s.topicProgress[r.id]||null}))}getBeginnerTopicsWithProgress(){return this.getAllTopicsWithProgress().filter(s=>s.topic.difficulty==="beginner")}getPlanTopicsWithProgress(s){const e=this.getUserProgress();if(!e)return null;const t=e.studyPlans.find(r=>r.id===s);if(!t)return null;const i=this.getAllTopicsWithProgress();return t.topicSequence.map(r=>i.find(a=>a.topic.id===r)).filter(r=>r!==void 0)}getOverallProgress(s){const e=this.getUserProgress()||this.initializeUserProgress(),t=s==="abo"?m.flatMap(o=>o.topics.map(n=>({...n,examType:"ABO",sectionId:o.id}))):f.flatMap(o=>o.topics.map(n=>({...n,examType:"NCLE",sectionId:o.id}))),i=t.length;let r=0;const a=[],c=[];t.forEach(o=>{const n=e.topicProgress[o.id];n!=null&&n.completed&&r++;const g={...o,completed:(n==null?void 0:n.completed)||!1,timeSpentMinutes:(n==null?void 0:n.timeSpentMinutes)||0,lastVisited:(n==null?void 0:n.lastStudiedDate)||null,progress:n!=null&&n.timeSpentMinutes?Math.min(Math.round(n.timeSpentMinutes/o.estimatedTimeMinutes*100),100):0};n!=null&&n.lastStudiedDate&&a.push(g),n!=null&&n.completed||c.push(g)}),a.sort((o,n)=>{const g=o.lastVisited?new Date(o.lastVisited).getTime():0;return(n.lastVisited?new Date(n.lastVisited).getTime():0)-g});const d=a.slice(0,6);c.sort((o,n)=>n.progress-o.progress);const p=c.slice(0,6);return{totalTopics:i,completedTopics:r,recentlyViewed:d,suggestedTopics:p}}getTopicById(s,e){for(const t of m){const i=t.topics.find(r=>r.id===s);if(i&&(!e||e==="ABO"))return{...i,examType:"ABO",sectionId:t.id}}for(const t of f){const i=t.topics.find(r=>r.id===s);if(i&&(!e||e==="NCLE"))return{...i,examType:"NCLE",sectionId:t.id}}return null}getTopicProgress(s){return(this.getUserProgress()||this.initializeUserProgress()).topicProgress[s]||null}trackTopicViewed(s){const e=this.getUserProgress()||this.initializeUserProgress();e.topicProgress[s]||(e.topicProgress[s]={topicId:s,timeSpentMinutes:0,completed:!1,progressPercentage:0,quizScore:0,quizCompleted:!1});const i=(e.recentlyViewedTopics||[]).filter(r=>r!==s);i.unshift(s),e.recentlyViewedTopics=i.slice(0,5),this.saveUserProgress(e)}}const D=new M;export{D as S};
